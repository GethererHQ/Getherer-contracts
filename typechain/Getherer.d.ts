/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GethererInterface extends ethers.utils.Interface {
  functions: {
    "getAmounts(uint256,address[])": FunctionFragment;
    "multiswapETHToToken(address,uint256)": FunctionFragment;
    "multiswapTokenToETH(address,address[],uint256[],uint256)": FunctionFragment;
    "multiswapTokenToToken(address,address,address[],uint256[],uint256)": FunctionFragment;
    "poolSwapETH(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAmounts",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multiswapETHToToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiswapTokenToETH",
    values: [string, string[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiswapTokenToToken",
    values: [string, string, string[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolSwapETH",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getAmounts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multiswapETHToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiswapTokenToETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiswapTokenToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolSwapETH",
    data: BytesLike
  ): Result;

  events: {};
}

export class Getherer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GethererInterface;

  functions: {
    getAmounts(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "getAmounts(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    multiswapETHToToken(
      _token: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "multiswapETHToToken(address,uint256)"(
      _token: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    multiswapTokenToETH(
      token: string,
      users: string[],
      amountsIn: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "multiswapTokenToETH(address,address[],uint256[],uint256)"(
      token: string,
      users: string[],
      amountsIn: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    multiswapTokenToToken(
      tokenIn: string,
      tokenOut: string,
      users: string[],
      amountsIn: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "multiswapTokenToToken(address,address,address[],uint256[],uint256)"(
      tokenIn: string,
      tokenOut: string,
      users: string[],
      amountsIn: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    poolSwapETH(
      _token: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "poolSwapETH(address,uint256)"(
      _token: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  getAmounts(
    amountIn: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getAmounts(uint256,address[])"(
    amountIn: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  multiswapETHToToken(
    _token: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "multiswapETHToToken(address,uint256)"(
    _token: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  multiswapTokenToETH(
    token: string,
    users: string[],
    amountsIn: BigNumberish[],
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "multiswapTokenToETH(address,address[],uint256[],uint256)"(
    token: string,
    users: string[],
    amountsIn: BigNumberish[],
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  multiswapTokenToToken(
    tokenIn: string,
    tokenOut: string,
    users: string[],
    amountsIn: BigNumberish[],
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "multiswapTokenToToken(address,address,address[],uint256[],uint256)"(
    tokenIn: string,
    tokenOut: string,
    users: string[],
    amountsIn: BigNumberish[],
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  poolSwapETH(
    _token: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "poolSwapETH(address,uint256)"(
    _token: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getAmounts(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getAmounts(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    multiswapETHToToken(
      _token: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "multiswapETHToToken(address,uint256)"(
      _token: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    multiswapTokenToETH(
      token: string,
      users: string[],
      amountsIn: BigNumberish[],
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "multiswapTokenToETH(address,address[],uint256[],uint256)"(
      token: string,
      users: string[],
      amountsIn: BigNumberish[],
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    multiswapTokenToToken(
      tokenIn: string,
      tokenOut: string,
      users: string[],
      amountsIn: BigNumberish[],
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "multiswapTokenToToken(address,address,address[],uint256[],uint256)"(
      tokenIn: string,
      tokenOut: string,
      users: string[],
      amountsIn: BigNumberish[],
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    poolSwapETH(
      _token: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "poolSwapETH(address,uint256)"(
      _token: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getAmounts(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmounts(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiswapETHToToken(
      _token: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "multiswapETHToToken(address,uint256)"(
      _token: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    multiswapTokenToETH(
      token: string,
      users: string[],
      amountsIn: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "multiswapTokenToETH(address,address[],uint256[],uint256)"(
      token: string,
      users: string[],
      amountsIn: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    multiswapTokenToToken(
      tokenIn: string,
      tokenOut: string,
      users: string[],
      amountsIn: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "multiswapTokenToToken(address,address,address[],uint256[],uint256)"(
      tokenIn: string,
      tokenOut: string,
      users: string[],
      amountsIn: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    poolSwapETH(
      _token: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "poolSwapETH(address,uint256)"(
      _token: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAmounts(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmounts(uint256,address[])"(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiswapETHToToken(
      _token: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "multiswapETHToToken(address,uint256)"(
      _token: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    multiswapTokenToETH(
      token: string,
      users: string[],
      amountsIn: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "multiswapTokenToETH(address,address[],uint256[],uint256)"(
      token: string,
      users: string[],
      amountsIn: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    multiswapTokenToToken(
      tokenIn: string,
      tokenOut: string,
      users: string[],
      amountsIn: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "multiswapTokenToToken(address,address,address[],uint256[],uint256)"(
      tokenIn: string,
      tokenOut: string,
      users: string[],
      amountsIn: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    poolSwapETH(
      _token: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "poolSwapETH(address,uint256)"(
      _token: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
